CSS grid is actually a whole new way of creating website layouts. It'll give you more flexibility than any other layout system or framework and it's also pretty intuitive. So why do you want to learn about CSS grid? Well, first of all because it makes your life a whole lot easier when it comes to creating two-dimensional layouts which basically almost all websites consists. So, secondly as you'll see it'll make your markup significantly simpler. It loads will give you a lot more flexibility when it comes to changing the layouts. For example through responsiveness and it'll also enable you to actually skip frameworks like for example bootstrap and finally CSS grid is now supported by all the major browsers and the support amongst global website traffic is climbing quickly. The benefits CSS grid has over a framework like bootstrap. Here we have created two mock-ups for a website this one is done using a CSS grid and this one down here is done using bootstrap. The layout contains a header a menu, content and footer. The mark-up is found in the examples HTML. Here you can see the HTML for the bootstrap example. Here we have the HTML for the grid example and we can instantly see that the CSS grid markup is significantly simpler than the bootstrap markup because there are all the unnecessary row items and the ugly class names. So as I mentioned CSS grid will make your markup cleaner. Benefit which of course would become much more apparent. If we were to turn these two examples into full-blown websites however this of course doesn't tell the whole story as the grid example of course needs CSS which you can see here in the examples dot CSS. Here is the CSS needed to create our grid example. Conceptually what's happening here is that instead of trying to define the layout which is the columns and the rows in the HTML, we're rather defining everything in the CSS and this brings us to our next benefit which is that this separation gives you a lot more flexibility. Let's say that you for example want the menu here to a pair up besides the header. When it's being viewed on mobile to make this happen and our CSS grid example we simply create a media query and then we target the items which we want to change according to the new layout which is the header, the menu and the content. And then simply give these their new values and the result is that when we shrink the page and if you look at this CSS great example. You didn't see that boom. There the menu item jumped up to the top row the header moves all the way to the right and the content took up the entire second row. We can change back. Now if we were to try this in bootstrap, we'd quickly realize the downside of having the layout defined in the HTML because what you want to do here is to make this menu item jump up to the first row up. Here, however that's not trivial because the menu item is already trapped in the second row down here. In order to move it up to the first row, you actually have to change our markup. You have to cut away this element down here and a stirring up here. That's not something you can do based upon a simple media query in CSS. You can of course do it in JavaScript but that's hacky and more complex. So what you want to do instead is learn CSS grid.
